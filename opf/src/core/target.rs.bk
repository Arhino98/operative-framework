use std::str::FromStr;

use super::session::Session;
use opf_common::search::Target as TargetSearch;
use opf_common::{self, Target};

impl Session {
    pub fn create_target(&mut self, target: opf_common::Target) {
        self.targets.push(target);
    }

    pub fn validate_target<'a>(&self, target: &'a Target, params: &'a TargetSearch) -> bool {
        let mut validate = true;

        if params.target_custom_id.is_some() {
            if target.target_custom_id.ne(&params.target_custom_id) {
                validate = false;
            }
        }

        if let Some(ref name) = params.target_name {
            if target.target_name.ne(name) {
                validate = false;
            }
        }

        if let Some(ref target_id) = params.target_id {
            if let Ok(uuid) = uuid::Uuid::from_str(target_id) {
                validate = target.target_id.eq(&uuid);
            }
        };

        if let Some(ref target_type) = params.target_type {
            if target.target_type.ne(target_type) {
                validate = false;
            }
        }
        validate
    }

    pub fn exist_target(&self, params: TargetSearch) -> bool {
        for target in &self.targets {
            if self.validate_target(&target, &params) {
                return true;
            }
        }
        false
    }

    pub fn delete_targets(&mut self, params: TargetSearch) {
        let mut targets = self.targets.clone();
        targets.retain(|target| !self.validate_target(target, &params));
        self.targets = targets;
    }

    pub fn update_targets(&mut self, params: TargetSearch) -> Result<(), String> {
        for mut target in &self.targets {
            if let Some(ref name) = params.target_name {
                target.target_name = name;
            }

            if let Some(ref target_type) = params.target_type {
            }
        }
        Ok(())
    }

    pub fn get_targets(&self, params: TargetSearch) -> Vec<Target> {
        let mut results: Vec<Target> = vec![];

        for target in &self.targets {
            if self.validate_target(&target, &params) {
                results.push(target.clone());
            }
        }
        results
    }
}
